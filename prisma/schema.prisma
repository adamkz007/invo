generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum PosOrderStatus {
  KITCHEN
  TO_PAY
  COMPLETED
  CANCELLED
}

enum PosOrderType {
  DINE_IN
  TAKEAWAY
}

model User {
  id                   String       @id @default(cuid())
  name                 String?
  email                String?      @unique
  phoneNumber          String?      @unique
  passwordHash         String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  subscriptionStatus   String?
  trialStartDate       DateTime?
  trialEndDate         DateTime?
  currentPeriodEnd     DateTime?
  company              Company?
  customers            Customer[]
  invoices             Invoice[]
  products             Product[]
  receipts             Receipt[]
  posOrders            PosOrder[]
  posTables            PosTable[]
  posSettings           PosSettings?
}

model Customer {
  id                      String    @id @default(cuid())
  name                    String
  email                   String?
  phoneNumber             String?
  street                  String?
  city                    String?
  postcode                String?
  state                   String?
  country                 String?   @default("Malaysia")
  registrationType        String?   @default("NRIC")
  registrationNumber      String?
  taxIdentificationNumber String?
  notes                   String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  userId                  String
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices                Invoice[]

  @@index([userId, createdAt])
}

model Product {
  id                     String         @id @default(cuid())
  name                   String
  description            String?
  price                  Decimal        @db.Decimal(12, 2)
  quantity               Int            @default(0)
  sku                    String?
  disableStockManagement Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  userId                 String
  invoiceItems           InvoiceItem[]
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  receiptItems           ReceiptItem[]
  posOrderItems          PosOrderItem[]

  @@index([userId, createdAt])
}

model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  String        @unique
  issueDate      DateTime      @default(now())
  dueDate        DateTime
  status         InvoiceStatus @default(DRAFT)
  subtotal       Decimal        @db.Decimal(12, 2)
  taxRate        Decimal        @db.Decimal(5, 2)  @default(0.00)
  taxAmount      Decimal        @db.Decimal(12, 2) @default(0.00)
  discountRate   Decimal        @db.Decimal(5, 2)  @default(0.00)
  discountAmount Decimal        @db.Decimal(12, 2) @default(0.00)
  total          Decimal        @db.Decimal(12, 2)
  paidAmount     Decimal        @db.Decimal(12, 2) @default(0.00)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  customerId     String
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer       Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items          InvoiceItem[]

  @@index([userId, createdAt])
  @@index([userId, status])
  @@index([customerId])
}

model InvoiceItem {
  id          String   @id @default(cuid())
  quantity    Int
  unitPrice   Decimal  @db.Decimal(12, 2)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoiceId   String
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Company {
  id                      String   @id @default(cuid())
  legalName               String?
  ownerName               String?
  address                 String?
  phoneNumber             String?
  email                   String?
  registrationNumber      String?
  taxIdentificationNumber String?
  termsAndConditions      String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  userId                  String   @unique
  bankAccountName         String?
  bankAccountNumber       String?
  bankName                String?
  paymentMethod           String?
  qrImageUrl              String?
  msicCode                String?
  city                    String?
  country                 String?  @default("Malaysia")
  postcode                String?
  state                   String?
  street                  String?
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Receipt {
  id            String        @id @default(cuid())
  receiptNumber String        @unique
  customerName  String
  customerPhone String?
  receiptDate   DateTime      @default(now())
  paymentMethod String        @default("CASH")
  total         Decimal       @db.Decimal(12, 2)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         ReceiptItem[]

  @@index([userId, createdAt])
}

model ReceiptItem {
  id          String   @id @default(cuid())
  quantity    Int
  unitPrice   Decimal  @db.Decimal(12, 2)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  receiptId   String
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  receipt     Receipt  @relation(fields: [receiptId], references: [id], onDelete: Cascade)

  @@index([productId])
}

// POS Models
model PosOrder {
  id           String         @id @default(cuid())
  orderNumber  String         @unique
  tableNumber  String
  tableId      String?
  status       PosOrderStatus @default(KITCHEN)
  orderType    PosOrderType   @default(DINE_IN)
  subtotal     Decimal        @db.Decimal(12, 2) @default(0.00)
  taxRate      Decimal        @db.Decimal(5, 2)  @default(0.00)
  taxAmount    Decimal        @db.Decimal(12, 2) @default(0.00)
  total        Decimal        @db.Decimal(12, 2) @default(0.00)
  notes        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  table        PosTable?      @relation(fields: [tableId], references: [id], onDelete: SetNull)
  items        PosOrderItem[]

  @@map("pos_orders")
  @@index([userId, createdAt])
  @@index([userId, status])
}

model PosOrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  unitPrice Decimal  @db.Decimal(12, 2)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  productId String
  order     PosOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("pos_order_items")
  @@index([productId])
}

model PosTable {
  id        String     @id @default(cuid())
  name      String
  label     String?
  isActive  Boolean    @default(true)
  capacity  Int        @default(4)
  positionX Float      @default(0)
  positionY Float      @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    PosOrder[]

  @@map("pos_tables")
}

model PosSettings {
  id                   String   @id @default(cuid())
  autoPrintEnabled     Boolean  @default(false)
  defaultPrinterAddress String?
  tableLayoutType      String   @default("LIST") // LIST, MAP
  taxRate              Decimal  @db.Decimal(5, 2) @default(0.00)
  serviceChargeRate    Decimal  @db.Decimal(5, 2) @default(0.00)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pos_settings")
}
